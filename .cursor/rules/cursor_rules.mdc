---
description: Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness.
globs: .cursor/rules/*.mdc
alwaysApply: true
---

- **Required Rule Structure:**

  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext, other/path/**/*
  alwaysApply: boolean
  ---

  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations
  ```

- **File References:**
  - Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files
  - Example: [prisma.mdc](mdc:.cursor/rules/prisma.mdc) for rule references
  - Example: [schema.prisma](mdc:prisma/schema.prisma) for code references
  - Related rule: [critical_partner.mdc](mdc:.cursor/rules/critical_partner.mdc) — operar como parceiro crítico-construtivo (questionar suposições, testar lógica)

- **Code Examples:**
  - Use language-specific code blocks

  ```typescript
  // ✅ DO: Show good examples
  const goodExample = true;
  
  // ❌ DON'T: Show anti-patterns
  const badExample = false;
  ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules

## **State Management Guidelines**

- **Zustand Obrigatório**: Todo estado global deve usar Zustand
  - Referência: [zustand.mdc](mdc:.cursor/rules/zustand.mdc)
  - Exemplo: [auth.store.ts](mdc:src/lib/stores/auth.store.ts)
  - Sincronização: [useAuthSync.ts](mdc:src/hooks/useAuthSync.ts)

- **Padrões de Estado**:
  - **Global**: Use Zustand stores
  - **Local**: Use useState/useReducer
  - **Server**: Use React Query/SWR
  - **Form**: Use React Hook Form

- **Organização de Stores**:
  - Um store por domínio (auth, onboarding, materials, etc.)
  - Interfaces bem definidas
  - Actions claras e específicas
  - Persistência quando necessário
