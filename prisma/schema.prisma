// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

// ===== ENUMS =====

enum Role {
  ADMIN
  MEMBER
  OWNER
}

enum UserType {
  CITIZEN
  COLLECTOR
  COMPANY
  NGO
}

enum ItemStatus {
  ACTIVE
  INACTIVE
  SOLD
  DONATED
  COLLECTED
}

enum TransactionType {
  SALE
  DONATION
  COLLECTION
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

// ===== MODELS =====

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  image         String?
  password      String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Auth.js relations
  accounts Account[]
  sessions Session[]

  // Relations
  profile          Profile?
  memberships      Member[]
  createdItems     Item[]
  orders           Order[]
  reviewerReviews  Review[]       @relation("ReviewerReviews")
  revieweeReviews  Review[]       @relation("RevieweeReviews")
  bids             Bid[]
  sentMessages     Message[]      @relation("SentMessages")
  receivedMessages Message[]      @relation("ReceivedMessages")
  notifications    Notification[]

  @@map("users")
}

// ===== AUTH.JS MODELS =====

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  @@map("authenticators")
}

model Profile {
  id              String   @id @default(cuid())
  name            String
  avatarUrl       String?
  bio             String?
  phone           String?
  userType        UserType @default(CITIZEN)
  role            Role?    @default(MEMBER)
  isActive        Boolean  @default(true)
  hasSelectedRole Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  description String?
  website     String?
  logoUrl     String?
  domain      String?  @unique
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members Member[]
  points  Point[]
  items   Item[]

  @@map("organizations")
}

model Member {
  id        String   @id @default(cuid())
  role      Role     @default(MEMBER)
  joinedAt  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId         String
  organizationId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("members")
}

model Point {
  id          String                                @id @default(cuid())
  name        String
  description String?
  address     String
  location    Unsupported("geography(Point, 4326)")
  isActive    Boolean                               @default(true)
  createdAt   DateTime                              @default(now())
  updatedAt   DateTime                              @updatedAt

  // Relations
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  pointItems     PointItem[]

  @@map("points")
}

model Material {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  items Item[]

  // Category relation
  categoryId String?
  category   MaterialCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("materials")
}

model MaterialCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  materials Material[]

  @@map("material_categories")
}

model Item {
  id              String                                 @id @default(cuid())
  title           String
  description     String?
  status          ItemStatus                             @default(ACTIVE)
  transactionType TransactionType                        @default(DONATION)
  price           Decimal?                               @db.Decimal(10, 2)
  quantity        Int                                    @default(1)
  location        Unsupported("geography(Point, 4326)")?
  createdAt       DateTime                               @default(now())
  updatedAt       DateTime                               @updatedAt

  // Relations
  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  materialId String?
  material   Material? @relation(fields: [materialId], references: [id], onDelete: SetNull)

  images     ItemImage[]
  pointItems PointItem[]
  orders     Order[]
  bids       Bid[]

  @@map("items")
}

model ItemImage {
  id        String   @id @default(cuid())
  url       String
  altText   String?
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  itemId String
  item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("item_images")
}

model PointItem {
  id String @id @default(cuid())

  // Relations
  pointId String
  itemId  String
  point   Point  @relation(fields: [pointId], references: [id], onDelete: Cascade)
  item    Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([pointId, itemId])
  @@map("point_items")
}

model Order {
  id          String      @id @default(cuid())
  status      OrderStatus @default(PENDING)
  totalAmount Decimal?    @db.Decimal(10, 2)
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  userId String
  itemId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)

  payment Payment?
  bids    Bid[]

  @@map("orders")
}

model Payment {
  id            String        @id @default(cuid())
  amount        Decimal       @db.Decimal(10, 2)
  status        PaymentStatus @default(PENDING)
  paymentMethod String?
  transactionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Bid {
  id        String    @id @default(cuid())
  amount    Decimal   @db.Decimal(10, 2)
  status    BidStatus @default(PENDING)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  itemId String
  item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)

  orderId String?
  order   Order?  @relation(fields: [orderId], references: [id])

  @@index([itemId, status])
  @@map("bids")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  senderId    String
  recipientId String
  sender      User   @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  recipient   User   @relation("ReceivedMessages", fields: [recipientId], references: [id], onDelete: Cascade)

  @@index([senderId, recipientId, createdAt])
  @@map("messages")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  body      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead, createdAt])
  @@map("notifications")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      @db.SmallInt
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  reviewerId String
  revieweeId String
  reviewer   User   @relation("ReviewerReviews", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewee   User   @relation("RevieweeReviews", fields: [revieweeId], references: [id], onDelete: Cascade)

  @@unique([reviewerId, revieweeId])
  @@map("reviews")
}
